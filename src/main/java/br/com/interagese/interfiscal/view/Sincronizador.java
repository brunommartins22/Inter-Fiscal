/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.interagese.interfiscal.view;

import br.com.interagese.interfiscal.business.FireTabproBusiness;
import br.com.interagese.interfiscal.business.FireTabproBusinessBean;
import br.com.interagese.interfiscal.business.FireTabfilBusinessBean;
import br.com.interagese.interfiscal.business.TabproBusiness;
import br.com.interagese.interfiscal.business.TabproBusinessBean;
import br.com.interagese.interfiscal.entity.Log;
import br.com.interagese.interfiscal.utils.Actions;
import java.awt.Graphics;
import java.awt.Image;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.plaf.metal.MetalButtonUI;
import br.com.interagese.interfiscal.business.FireTabfilBusiness;
import br.com.interagese.interfiscal.entity.ImportacaoImp;
import br.com.interagese.interfiscal.entity.Sessao;
import br.com.interagese.interfiscal.entity.SincronizadorTable;
import br.com.interagese.interfiscal.entity.Tabfil;
import br.com.interagese.interfiscal.table.SincronizadorTableModel;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Writer;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.DecimalFormat;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import liquibase.util.csv.CSVWriter;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

/**
 *
 * @author bruno
 */
public class Sincronizador extends JInternalFrame {

    private static JFrame jfrmPrincipal;
    private final Actions a;

    private final TabproBusiness tabproBusiness;

    private final FireTabproBusiness fireTabproBusiness;
    private final FireTabfilBusiness tabfilBusiness;
    private SincronizadorTableModel sincronizadorTableModelFire;
    private SincronizadorTableModel sincronizadorTableModelPost;

    /**
     * Creates new form JFrmPrincipal
     *
     * @param pai
     */
    public Sincronizador(javax.swing.JFrame pai) {
        jfrmPrincipal = pai;
        this.tabfilBusiness = new FireTabfilBusinessBean();
        this.fireTabproBusiness = new FireTabproBusinessBean();
        this.tabproBusiness = new TabproBusinessBean();

        this.a = new Actions(jfrmPrincipal);

        initComponents();
        definirFormulario();

    }

    public void definirFormulario() {
        this.setTitle("Sincronizador");
        a.iconApplicationInternalFrame(this);
        jLabelOldDataBase.setText("→ DATABASE DE COMPARAÇÃO");

        jLabelNewDataBase.setText("ATACADÃO MANO A MANO - MATRIZ");

        carregarListagem();

        jBtnAtualizar.setUI(new MetalButtonUI());
        jBtnSincronizar.setUI(new MetalButtonUI());
        jBtnExportar.setUI(new MetalButtonUI());

    }

    public void carregarListagem() {
        try {

            sincronizadorTableModelFire = new SincronizadorTableModel(fireTabproBusiness.getCarregarALL());
            sincronizadorTableModelPost = new SincronizadorTableModel(tabproBusiness.getCarregarALL());

            jTableOldDataBase.setModel(sincronizadorTableModelPost);
            jTableNewDataBase.setModel(sincronizadorTableModelFire);

            carregarSizeList(sincronizadorTableModelPost.getRowCount(), sincronizadorTableModelFire.getRowCount());

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public void carregarSizeList(Integer oldList, Integer NewList) {
        jLabelOldDataBase.setText(NewList != null ? ("→ DATABASE DE COMPARAÇÃO" + "(" + NewList + ")") : jLabelOldDataBase.getText());

        jLabelNewDataBase.setText(oldList != null ? ("ATACADÃO MANO A MANO - MATRIZ" + "(" + oldList + ")") : jLabelNewDataBase.getText());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel(){
            protected  void paintComponent(Graphics g){
                super.paintComponent(g);
                ImageIcon icon = new ImageIcon(getClass().getResource("/imagens/fundo.png"));
                Image image = icon.getImage();
                g.drawImage(image,0,0,getWidth(),getHeight(),this);
            }};
            jSeparator1 = new javax.swing.JSeparator();
            jScrollPane1 = new javax.swing.JScrollPane();
            jTableOldDataBase = new javax.swing.JTable();
            jScrollPane3 = new javax.swing.JScrollPane();
            jTableNewDataBase = new javax.swing.JTable();
            jPanel2 = new javax.swing.JPanel();
            jLabelOldDataBase = new javax.swing.JLabel();
            jBtnAtualizar = new javax.swing.JButton();
            jBtnSincronizar = new javax.swing.JButton();
            jBtnExportar = new javax.swing.JButton();
            jPanel5 = new javax.swing.JPanel();
            jLabelNewDataBase = new javax.swing.JLabel();

            setClosable(true);
            setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
            setIconifiable(true);
            setMaximizable(true);
            setResizable(true);
            getContentPane().setLayout(new java.awt.CardLayout());

            jPanel1.setBackground(new java.awt.Color(204, 204, 204));
            jPanel1.setPreferredSize(new java.awt.Dimension(1200, 600));

            jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

            jTableOldDataBase.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                    {null, null, null, null},
                    {null, null, null, null},
                    {null, null, null, null},
                    {null, null, null, null}
                },
                new String [] {
                    "Title 1", "Title 2", "Title 3", "Title 4"
                }
            ));
            jScrollPane1.setViewportView(jTableOldDataBase);

            jTableNewDataBase.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                    {null, null, null, null},
                    {null, null, null, null},
                    {null, null, null, null},
                    {null, null, null, null}
                },
                new String [] {
                    "Title 1", "Title 2", "Title 3", "Title 4"
                }
            ));
            jScrollPane3.setViewportView(jTableNewDataBase);

            jPanel2.setBackground(new java.awt.Color(18, 18, 56));
            jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

            jLabelOldDataBase.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
            jLabelOldDataBase.setForeground(new java.awt.Color(255, 255, 255));
            jLabelOldDataBase.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
            jLabelOldDataBase.setText(" → DATA BASE DE COMPARAÇÃO");

            jBtnAtualizar.setBackground(new java.awt.Color(0, 51, 102));
            jBtnAtualizar.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
            jBtnAtualizar.setForeground(new java.awt.Color(255, 255, 255));
            jBtnAtualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/relod.png"))); // NOI18N
            jBtnAtualizar.setToolTipText("Atualizar Tabelas");
            jBtnAtualizar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
            jBtnAtualizar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            jBtnAtualizar.setFocusable(false);
            jBtnAtualizar.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jBtnAtualizarActionPerformed(evt);
                }
            });

            jBtnSincronizar.setBackground(new java.awt.Color(0, 51, 102));
            jBtnSincronizar.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
            jBtnSincronizar.setForeground(new java.awt.Color(255, 255, 255));
            jBtnSincronizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/env.png"))); // NOI18N
            jBtnSincronizar.setToolTipText("Sincronizar Tabelas");
            jBtnSincronizar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
            jBtnSincronizar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            jBtnSincronizar.setFocusable(false);
            jBtnSincronizar.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jBtnSincronizarActionPerformed(evt);
                }
            });

            jBtnExportar.setBackground(new java.awt.Color(0, 51, 102));
            jBtnExportar.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
            jBtnExportar.setForeground(new java.awt.Color(255, 255, 255));
            jBtnExportar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/excel_150.png"))); // NOI18N
            jBtnExportar.setToolTipText("Exportar produtos nao sincronizados");
            jBtnExportar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
            jBtnExportar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            jBtnExportar.setFocusable(false);
            jBtnExportar.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jBtnExportarActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
            jPanel2.setLayout(jPanel2Layout);
            jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addComponent(jLabelOldDataBase, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jBtnAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jBtnExportar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jBtnSincronizar, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
            );
            jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabelOldDataBase, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jBtnExportar)
                            .addComponent(jBtnSincronizar)
                            .addComponent(jBtnAtualizar)))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );

            jPanel5.setBackground(new java.awt.Color(18, 18, 56));
            jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

            jLabelNewDataBase.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
            jLabelNewDataBase.setForeground(new java.awt.Color(255, 255, 255));
            jLabelNewDataBase.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            jLabelNewDataBase.setText("ATACADÃO MANO A MANO (MATRIZ)");

            javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
            jPanel5.setLayout(jPanel5Layout);
            jPanel5Layout.setHorizontalGroup(
                jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabelNewDataBase, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            );
            jPanel5Layout.setVerticalGroup(
                jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabelNewDataBase, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
            );

            javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
            jPanel1.setLayout(jPanel1Layout);
            jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 562, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(2, 2, 2)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 599, Short.MAX_VALUE))
                    .addContainerGap())
            );
            jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(8, 8, 8)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addComponent(jScrollPane1))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 539, Short.MAX_VALUE)))
                    .addContainerGap())
                .addComponent(jSeparator1)
            );

            getContentPane().add(jPanel1, "card2");

            pack();
        }// </editor-fold>//GEN-END:initComponents


    private void jBtnAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAtualizarActionPerformed
        try {
            new Thread(new Runnable() {
                @Override
                public void run() {
                    try {
                        JDlgCarregando carregando = a.carregarJdialog("Carregando...", jfrmPrincipal);
                        carregando.setVisible(true);
                        carregando.loadBarra("Atualizando...", 0, 0, true);
                        carregarListagem();

                        Thread.sleep(1000);
                        carregando.loadBarra("Dados Atualizados com sucesso !!", 0, 0, true);
                        Thread.sleep(500);
                        carregando.setTexto("Finalizando Atualização...");
                        Thread.sleep(1000);
                        carregando.dispose();
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        JDlgMensagem mensagem = new JDlgMensagem(jfrmPrincipal, true, ex);
                        mensagem.setVisible(true);
                    }

                }
            }).start();

        } catch (Exception ex) {
            ex.printStackTrace();
            JDlgMensagem mensagem = new JDlgMensagem(jfrmPrincipal, true, ex);
            mensagem.setVisible(true);
        }
    }//GEN-LAST:event_jBtnAtualizarActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing


    }//GEN-LAST:event_formWindowClosing

    private void jBtnSincronizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSincronizarActionPerformed
        sincronizar(true);

    }//GEN-LAST:event_jBtnSincronizarActionPerformed

    public void sincronizar(boolean resp) {
        new Thread(new Runnable() {
            @Override
            public void run() {
                JDlgCarregando carregando = null;
                Log logApp = null;
                try {

                    carregando = a.carregarJdialog("Sincronizando ...", jfrmPrincipal);
                    carregando.setVisible(true);
                    String texto = "Sincronizando Tabelas ...";
                    carregando.loadBarra(texto, 0, 0, true);

                    String mensagem = "";
                    logApp = new Log();

                    if (sincronizadorTableModelFire.getRowCount() > 0 && sincronizadorTableModelPost.getRowCount() > 0) {
                        List<SincronizadorTable> resultNotIsEditable = new ArrayList<>();
                        int cont = 0;
                        for (int i = 0; i <= (sincronizadorTableModelPost.getResultList().size() - 1); i++) {
                            SincronizadorTable p = sincronizadorTableModelPost.getResultList().get(i);

                            if (p.getCodbarun() != null && !p.getCodbarun().equals("") && p.getCodbarun().length() == 13) {

                                carregando.loadBarra("Carregando dados ", i, sincronizadorTableModelPost.getResultList().size() - 1, false);

                                SincronizadorTable f = sincronizadorTableModelFire.getFindCodList(p.getCodbarun());

                                if (f != null && f.getCodbarun() != null && !f.getCodbarun().equals("")) {
                                    carregando.setTexto(p.getCodbarun() + " - " + p.getDescpro());
                                    f.setPratpro(p.getPratpro());
                                    f.setPrvapro(p.getPrvapro());

                                    if (resp) {
                                        fireTabproBusiness.updateAll(f.getCodbarun(), f.getPrvapro(), f.getPratpro());
                                    }
                                } else {
                                    resultNotIsEditable.add(p);
                                }
                            } else {
                                resultNotIsEditable.add(p);
                            }
                            cont++;
                            if (cont == 500) {
                                cont = 0;
                                carregando.limparBufferText();
                            }
                        }
                        carregando.loadBarra("Tabelas Sincronizadas com Sucesso ...", 0, 0, true);

                        if (!resultNotIsEditable.isEmpty() && !resp) {
                            carregando.loadBarra("Gerando Arquivo dos Produtos nao Atualizados ...", 0, 0, true);
                            carregando.setTexto("Gravando Arquivo ...");
                            JFileChooser chooser = new JFileChooser();
                            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                            int i = chooser.showSaveDialog(jfrmPrincipal);
                            if (i == JFileChooser.APPROVE_OPTION) {

                                carregando.setVisible(true);
                                carregando.loadBarra("Exportando Arquivo Excel...", 0, 0, true);
                                i = 0;
                                String filename = chooser.getSelectedFile().getAbsolutePath() + ".xls";
                                HSSFWorkbook workbook = new HSSFWorkbook();
                                HSSFSheet sheet = workbook.createSheet("FirstSheet");

                                HSSFCellStyle txtStyle1 = (HSSFCellStyle) workbook.createCellStyle();
                                HSSFCellStyle txtStyle2 = (HSSFCellStyle) workbook.createCellStyle();
                                HSSFCellStyle txtStyle3 = (HSSFCellStyle) workbook.createCellStyle();

                                HSSFFont txtFont1 = (HSSFFont) workbook.createFont();
                                HSSFFont txtFont2 = (HSSFFont) workbook.createFont();
                                HSSFFont txtFont3 = (HSSFFont) workbook.createFont();

                                txtFont1.setFontName("Arial");
                                txtFont1.setFontHeightInPoints((short) 18);
                                txtFont1.setBold(true);
                                txtFont1.setColor((short) 003366);
                                txtStyle1.setFont(txtFont1);

                                txtFont2.setFontHeightInPoints((short) 14);
                                txtFont2.setFontName("Arial");
                                txtFont2.setColor((short) 003366);
                                txtStyle2.setFont(txtFont2);

                                txtFont3.setFontHeightInPoints((short) 11);
                                txtFont3.setFontName("Arial");
                                txtFont3.setBold(true);
                                txtFont3.setColor((short) 003366);
                                txtStyle3.setFont(txtFont3);

                                //******************* titulo ************************
                                HSSFRow rowfilial = sheet.createRow((short) i++);
                                rowfilial.createCell(0).setCellValue("Filial: ");
                                rowfilial.createCell(1).setCellValue("Sao Caetado de Odivelas");
                                rowfilial.getCell(0).setCellStyle(txtStyle2);
                                rowfilial.getCell(1).setCellStyle(txtStyle2);

                                HSSFRow rowHeader2 = sheet.createRow((short) i++);
                                rowHeader2.createCell(0).setCellValue("Status");
                                rowHeader2.createCell(1).setCellValue("Codigo de Barras");
                                rowHeader2.createCell(2).setCellValue("Filial");
                                rowHeader2.createCell(3).setCellValue("Produto");
                                rowHeader2.createCell(4).setCellValue("Preco Varejo");
                                rowHeader2.createCell(5).setCellValue("Preco Atacado");
                                rowHeader2.getCell(0).setCellStyle(txtStyle3);
                                rowHeader2.getCell(1).setCellStyle(txtStyle3);
                                rowHeader2.getCell(2).setCellStyle(txtStyle3);
                                rowHeader2.getCell(3).setCellStyle(txtStyle3);
                                rowHeader2.getCell(4).setCellStyle(txtStyle3);
                                rowHeader2.getCell(5).setCellStyle(txtStyle3);

                                //***************************************************
                                DecimalFormat Formata = new DecimalFormat("#,##0.00");
                                cont = 1;

                                for (SincronizadorTable item : resultNotIsEditable) {
                                    carregando.loadBarra("Exportando Produtos ", cont, resultNotIsEditable.size(), false);
                                    HSSFRow rowHeader3 = sheet.createRow(i++);
                                    rowHeader3.createCell(0).setCellValue(item.getStprodDesc());
                                    rowHeader3.createCell(1).setCellValue(item.getCodbarun() == null ? "" : item.getCodbarun());
                                    rowHeader3.createCell(2).setCellValue(item.getCodfil() == null ? "" : item.getCodfil().toString());
                                    rowHeader3.createCell(3).setCellValue(item.getDescpro() == null ? "" : item.getDescpro());
                                    rowHeader3.createCell(4).setCellValue(item.getPrvapro() != null ? Formata.format(item.getPrvapro()) : "0,00");
                                    rowHeader3.createCell(5).setCellValue(item.getPratpro() != null ? Formata.format(item.getPratpro()) : "0,00");

                                    cont++;
                                }
                                try {
                                    FileOutputStream fileOut = new FileOutputStream(filename);
                                    workbook.write(fileOut);
                                    fileOut.close();
                                    workbook.close();
                                    carregando.loadBarra("Arquivo Exportado com Sucesso ...", 0, 0, true);

                                } catch (Exception ex) {
                                    StringWriter writer = new StringWriter();
                                    PrintWriter pw = new PrintWriter(writer);
                                    ex.printStackTrace(pw);
                                    logApp.setError("Inter-Fiscal - " + new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date()) + " → " + writer.toString());
                                    a.carregarLog(logApp, 2);
                                    //JDlgMensagem mensagem = new JDlgMensagem(jfrmPrincipal, true, ex);
                                    // mensagem.setVisible(true);
                                }

                            } else {
                                JOptionPane.showMessageDialog(jfrmPrincipal, "Operação cancelada pelo usuário!!", null, JOptionPane.ERROR_MESSAGE);
                            }
                        } else if (!resp) {
                            carregando.loadBarra("Nenhum Produto em divergencia ...", 0, 0, true);
                        }
                        carregando.setTexto("Finalizando !!");
                        Thread.sleep(1500);
                        carregando.dispose();
                    }

                    carregarListagem();

                } catch (Exception ex) {
                    carregando.limparBufferText();
                    carregando.dispose();
                    ex.printStackTrace();
                    StringWriter writer = new StringWriter();
                    PrintWriter pw = new PrintWriter(writer);
                    ex.printStackTrace(pw);
                    logApp.setError("Inter-Fiscal - " + new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date()) + " → " + writer.toString());
                    JDlgMensagem m = new JDlgMensagem(jfrmPrincipal, true, ex);
                    m.setVisible(true);
                }

                a.carregarLog(logApp, 1);
            }
        }
        ).start();

    }

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

    }//GEN-LAST:event_formWindowOpened

    private void jBtnExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnExportarActionPerformed
        sincronizar(false);
    }//GEN-LAST:event_jBtnExportarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Sincronizador.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Sincronizador.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Sincronizador.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Sincronizador.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Sincronizador(new JFrame()).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnAtualizar;
    private javax.swing.JButton jBtnExportar;
    private javax.swing.JButton jBtnSincronizar;
    private javax.swing.JLabel jLabelNewDataBase;
    private javax.swing.JLabel jLabelOldDataBase;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTableNewDataBase;
    private javax.swing.JTable jTableOldDataBase;
    // End of variables declaration//GEN-END:variables
}
